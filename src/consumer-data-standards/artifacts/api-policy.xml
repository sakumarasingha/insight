<policies>
    <inbound>
        <base />
        <rate-limit-by-key calls="10"
        renewal-period="60"
        increment-condition="@(context.Response.StatusCode == 200)"
        counter-key="@(context.Request.IpAddress)"
        remaining-calls-variable-name="remainingCallsPerIP"/>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <set-header name="Content-Type" exists-action="override">
                    <value>application/json</value>
                </set-header>
            </when>
            <when condition="@(context.Response.StatusCode == 400)">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-body template="liquid">{"error": "The request was unacceptable, often due
                        to missing a required parameter."}</set-body>
                </return-response>
            </when>
            <when condition="@(context.Response.StatusCode == 401)">
                <return-response>
                    <set-status code="401" reason="Unauthorized" />
                    <set-body template="liquid">{"error": "No valid API key provided."}</set-body>
                </return-response>
            </when>
            <when condition="@(context.Response.StatusCode == 402)">
                <return-response>
                    <set-status code="402" reason="Request Failed" />
                    <set-body template="liquid">{"error": "The parameters were valid but the request
                        failed."}</set-body>
                </return-response>
            </when>
            <when condition="@(context.Response.StatusCode == 403)">
                <return-response>
                    <set-status code="403" reason="Forbidden" />
                    <set-body template="liquid">{"error": "The API key doesn’t have permissions to
                        perform the request."}</set-body>
                </return-response>
            </when>
            <when condition="@(context.Response.StatusCode == 404)">
                <return-response>
                    <set-status code="404" reason="Not Found" />
                    <set-body template="liquid">{"error": "The requested resource doesn’t exist."}</set-body>
                </return-response>
            </when>
            <when condition="@(context.Response.StatusCode == 409)">
                <return-response>
                    <set-status code="409" reason="Conflict" />
                    <set-body template="liquid">{"error": "The request conflicts with another
                        request."}</set-body>
                </return-response>
            </when>
            <when condition="@(context.Response.StatusCode == 429)">
                <return-response>
                    <set-status code="429" reason="Too Many Requests" />
                    <set-body template="liquid">{"error": "Too many requests hit the API too
                        quickly. We recommend an exponential backoff of your requests."}</set-body>
                </return-response>
            </when>
            <!-- <when condition="@(context.Response.StatusCode >= 500 and
            context.Response.StatusCode <= 504)">
                <return-response>
                    <set-status code="500" reason="Server Error" />
                    <set-body template="liquid">{"error": "Something went wrong on the server's end."}</set-body>
                </return-response>
            </when>-->
            <otherwise>
                <set-header name="Content-Type" exists-action="override">
                    <value>application/json</value>
                </set-header>

            </otherwise>
        </choose>
    </on-error>
</policies>